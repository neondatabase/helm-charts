# Default values for neon-storage-controller.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  # -- Neondatabase image repository
  repository: neondatabase/neon
  # -- image pull policy
  pullPolicy: Always
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# -- Specify docker-registry secret names as an array
imagePullSecrets: []

# -- String to partially override neon-storage-controller.fullname template (will maintain the release name)
nameOverride: ""
# -- String to fully override neon-storage-controller.fullname template
fullnameOverride: ""

# Neon controller settings
settings:
  # settings.sentryUrl -- url (will be converted into `SENTRY_DSN` environment variable) used by sentry to collect error/panic events in storage-controller
  sentryUrl: ""
  # settings.sentryEnvironment -- "development" or "production". It will be visible in sentry in order to filter issues
  sentryEnvironment: "development"
  # postgresql:// URL to the database
  databaseUrl: ""
  # JWT token for authentication with pageservers
  jwtToken: ""
  # -- JWT token for authentication with safekeepers
  safekeeperJwtToken: ""
  # -- JWT token for authentication with other storage controller instances
  peerJwtToken: ""
  # public key for authenticating incoming HTTP requests
  publicKey: ""
  # JWT token for authenticating calls to controlPlaneUrl
  controlPlaneJwtToken: ""
  # -- Base URL for control plane API endpoints (e.g., https://control-plane.example.com/storage/api/v1/)
  controlPlaneUrl: ""
  # settings.heartbeatInterval -- Period with which to send heartbeats to registered nodes.
  heartbeatInterval: ""
  # settings.maxOfflineInterval -- Grace period before marking unresponsive pageserver offline.
  maxOfflineInterval: ""
  # settings.maxWarmingUpInterval -- Extended grace period within which pageserver may not respond
  # to heartbeats. Kicks in after the node has been drained for restart and/or upon handling the
  # re-attach request from a node.
  maxWarmingUpInterval: ""
  # settings.initialSplitThreshold -- Size threshold in bytes for initial tenant splits.
  initialSplitThreshold: ""
  # settings.initialSplitShards -- Number of shards to use for initial tenant splits.
  initialSplitShards: ""
  # settings.splitThreshold -- Shard size threshold in bytes for automatically splitting shards.  Omit to disable auto-sharding (default)
  splitThreshold: ""
  # settings.maxSplitShards -- Maximum number of shards for autosplits.
  maxSplitShards: ""
  # -- Chaos testing for tenant migration interval
  chaosInterval: ""
  # -- Chaos testing for immediate exit crontab
  chaosExitCrontab: ""
  # -- When set to True, restart the service gracefully
  startAsCandidate: false
  # -- If a reconciliation takes longer than this, bump an alerting metric
  longReconcileThreshold: "30min"


# Enable auto register to control plane
# This will run postinstall job
registerControlPlane:
  enable: false
  # region_id: "<region-id>"
  controlPlaneJwtToken: ""
  # cplane_url: "<control-plane-url>"
  resources:
    limits:
      cpu: 100m
      memory: 128M
    requests:
      cpu: 100m
      memory: 128M

serviceAccount:
  # serviceAccount.create - Specifies whether a service account should be created
  create: true
  # serviceAccount.annotations -- Annotations to add to the service account
  annotations: {}
  # serviceAccount.name - The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Annotations for neon-storage-controller pods
podAnnotations: {}

# -- Additional labels for neon-storage-controller pods
podLabels: {}
  # neon_service: controller
  # neon_env: staging
  # neon_region: us-west-1
  # neon_region_slug: virginia

# -- neon-storage-controller's pods Security Context
podSecurityContext: {}
  # fsGroup: 2000

# -- neon-storage-controller's containers Security Context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # service.annotations -- Annotations to add to the service
  annotations: {}
  type: ClusterIP
  # service.port -- controller listen port
  port: 50051

ingress:
  # ingress.enabled -- Enable ingress controller resource.
  enabled: true
  # ingress.className -- Ingress class for controller
  className: nginx-int
  # ingress.annotations -- Additional annotations for Ingress resource.
  annotations: {}
    # external-dns.alpha.kubernetes.io/hostname: chart-example.local
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          # https://kubernetes.io/docs/concepts/services-networking/ingress/#path-types
          pathType: Prefix
          protocol: TCP
resources:
  limits:
    memory: 4Gi
  requests:
    cpu: "1"
    memory: 1Gi

# -- Node labels for pod assignment.
nodeSelector: {}

# -- Tolerations for pod assignment.
tolerations: []

# -- Affinity for pod assignment
affinity: {}

# -- Pod priority class
priorityClassName: ""

metrics:
  # metrics.enabled -- Enable prometheus metrcis autodiscovery
  enabled: false
  ## Prometheus Operator ServiceMonitor configuration
  ##
  serviceMonitor:
    # metrics.serviceMonitor.enabled -- Create ServiceMonitor resource
    enabled: false

    # metrics.serviceMonitor.namespace -- The namespace in which the ServiceMonitor will be created, if empty then Release.Namespace used
    namespace: ""

    ## Interval at which metrics should be scraped.
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ##
    # metrics.serviceMonitor.interval -- Interval in which prometheus scrapes
    interval: 10s

    ## Timeout after which the scrape is ended
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ##
    # metrics.serviceMonitor.scrapeTimeout -- Scrape Timeout duration for prometheus
    scrapeTimeout: 10s

    ## ServiceMonitor selector labels
    ## ref: https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack#prometheusioscrape
    ##
    # metrics.serviceMonitor.selector -- Additional labels to attach (used by Prometheus operator)
    selector: {}
    # selector:
    #   prometheus: neon


# -- Additional manifests that are created with the chart
extraManifests: []
